#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('expressapp:server');
var http = require('http');
var gravatar = require('gravatar');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var io = require('socket.io').listen(server);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

  

  var chat = io.on('connection', function (socket) {


    socket.on('load',function(data){
      
      var room = findClientsSocket(io,data);
      
      if(room.length === 0 ) {

        socket.emit('peopleinchat', {number: 0});
      }
      else if(room.length === 1) {

        socket.emit('peopleinchat', {
          number: 1,
          user: room[0].username,
          avatar: room[0].avatar,
          id: data
        });
      }
      else if(room.length >= 2) {

        chat.emit('tooMany', {boolean: true});
      }
    });

    socket.on('login', function(data) {

      var room = findClientsSocket(io, data.id);
      if (room.length < 2) {

        socket.username = data.user;
        socket.room = data.id;
        socket.avatar = gravatar.url(data.avatar, {s: '140', r: 'x', d: 'mm'});

        socket.emit('img', socket.avatar);


        socket.join(data.id);

        if (room.length == 1) {

          var usernames = [],
            avatars = [];
          usernames.push(room[0].username);
          usernames.push(socket.username);

          avatars.push(room[0].avatar);
          avatars.push(socket.avatar);


          chat.in(data.id).emit('startChat', {
            boolean: true,
            id: data.id,
            users: usernames,
            avatars: avatars
          });
        }
      }
      else {
        socket.emit('tooMany', {boolean: true});
      }
    });

    socket.on('disconnect', function() {

      socket.broadcast.to(this.room).emit('leave', {
        boolean: true,
        room: this.room,
        user: this.username,
        avatar: this.avatar
      });

      socket.leave(socket.room);
    });


    socket.on('msg', function(data){

      socket.broadcast.to(socket.room).emit('receive', {msg: data.msg, user: data.user, img: data.img});
    });
  });

function findClientsSocket(io,roomId, namespace) {
  var res = [],
    ns = io.of(namespace ||"/");    
  if (ns) {
    for (var id in ns.connected) {
      if(roomId) {
        var index = ns.connected[id].rooms.indexOf(roomId) ;
        if(index !== -1) {
          res.push(ns.connected[id]);
        }
      }
      else {
        res.push(ns.connected[id]);
      }
    }
  }
  return res;
}


